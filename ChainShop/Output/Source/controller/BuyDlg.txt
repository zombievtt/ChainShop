

public class BuyDlg extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JComboBox cbShopNameList;
	private JTextField menu000Count;
	private JTextField menu001Count;
	private JTextField menu002Count;
	private JLabel lb000, lb001, lb002;
	private JLabel menu000Name, menu001Name, menu002Name;
	private JLabel menu000Price, menu001Price, menu002Price;
	private JLabel lbCount000, lbCount001, lbCount002;
	private JLabel lbDateTime;
	private JTextArea textArea;
	private JScrollPane spTotal;
	private String DTF = "yyyy-MM-dd HH:mm:ss";
	private String strDateTime = "";
	private final int ONE_SECOND = 1000;

	

	
		setTitle("下訂單");

		JPanel panel = new JPanel();

		JButton btnTotal = new JButton("總額");
		btnTotal.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				boolean bSuccess = checkField();
				if (false == bSuccess)
				{
					return;
				}
				
				printInfo();
			}
		});

        //顯示總額計算
		textArea = new JTextArea();
		textArea.setLineWrap(true);// 自動換列
		textArea.setEditable(false);
		
		//加入垂直卷軸
		spTotal = new JScrollPane(textArea);
		spTotal.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		

		JButton btnOK = new JButton("確定");
		btnOK.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				boolean bSuccess = checkField();
				if (false == bSuccess)
				{
					//欄位不可空白
					return;
				}
				printInfo();

				//設定訂單資訊 存在 "buyOrder.txt"
				Member m = (Member) Cal.readFile("member.txt");
				BranchShop bs = (BranchShop) Cal.readFile("branchShop.txt");
				BuyOrder bo = new BuyOrder();
				bo.setMemberName(m.getName());
				bo.setMemberAccount(m.getAccount());
				bo.setMemberPassword(m.getPassword());
				bo.setShopName(bs.getShopName());
				bo.setMenu000Name(bs.getMenu000Name());
				bo.setMenu001Name(bs.getMenu001Name());
				bo.setMenu002Name(bs.getMenu002Name());

				Integer iMenu000Price = bs.getMenu000Price();
				Integer iMenu001Price = bs.getMenu001Price();
				Integer iMenu002Price = bs.getMenu002Price();
				bo.setMenu000Price(iMenu000Price);
				bo.setMenu001Price(iMenu001Price);
				bo.setMenu002Price(iMenu002Price);

				Integer iMenu000Count = Integer.parseInt(menu000Count.getText());
				Integer iMenu001Count = Integer.parseInt(menu001Count.getText());
				Integer iMenu002Count = Integer.parseInt(menu002Count.getText());
				bo.setMenu000Count(iMenu000Count);
				bo.setMenu001Count(iMenu001Count);
				bo.setMenu002Count(iMenu002Count);

				Integer iSum = iMenu000Price*iMenu000Count + 
						       iMenu001Price*iMenu001Count + 
						       iMenu002Price*iMenu002Count;
				bo.setBuySum(iSum);

				String DF = "yyyy-MM-dd";
				String TF = "HH:mm:ss";
				String strDate = "";
				String strTime = "";
				SimpleDateFormat sdfDate = new SimpleDateFormat(DF);
				SimpleDateFormat sdfTime = new SimpleDateFormat(TF);
				strDate = sdfDate.format(Calendar.getInstance().getTime());
				strTime = sdfTime.format(Calendar.getInstance().getTime());
				bo.setBuyDate(strDate);
				bo.setBuyTime(strTime);
				bo.setBuyState(BuyState.strUnread);
				
				//設定訂單資訊 存在 "buyOrder.txt"
				Cal.saveFile("buyOrder.txt", bo);

				BuyConfirmDlg b = new BuyConfirmDlg();
				b.setVisible(true);
				dispose();
			}
		});
		

		// 只能輸入數字
		KeyAdapter ka = new KeyAdapter() {
			public void keyTyped(KeyEvent e) {
				int keyChar = e.getKeyChar();
				if (keyChar >= KeyEvent.VK_0 && keyChar <= KeyEvent.VK_9) {
				} else {
					// 禁用鍵盤事件傳遞
					e.consume();
				}
			}
		};

		menu000Count.addKeyListener(ka);
		menu001Count.addKeyListener(ka);
		menu002Count.addKeyListener(ka);

        //每隔一秒顯示時間
		Timer timer = new Timer();
		timer.scheduleAtFixedRate(new JLabelTimerTask(), new Date(), ONE_SECOND);

		// 載入分店名稱
		List<BranchShop> l = new BranchShopServiceImpl().queryAll();

        //JComboBox 分店名稱選取事件 改變UI
		ActionListener actionListener = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				changeUIByShopName();
			}
		};

        //JComboBox 載入分店名稱 
		if (l.size() > 0) {
			for (BranchShop b : l) {
				cbShopNameList.addItem(b.getShopName());
			}

			cbShopNameList.addActionListener(actionListener);
			cbShopNameList.setSelectedIndex(0);
		} else {
			JOptionPane.showMessageDialog(null, "沒有分店可以選擇", "下訂單", JOptionPane.WARNING_MESSAGE);
		}

		changeUIByShopName();

	}

	void changeUIByShopName() {
		textArea.setText("");
		// 獲取分店名稱
		String strShopName = cbShopNameList.getSelectedItem().toString().trim();

		// 查詢分店資訊
		List<BranchShop> listBranchShop = new BranchShopServiceImpl().queryAllByShopName(strShopName);
		BranchShop bs = listBranchShop.get(0);
		Integer id = bs.getId();

		// 載入分店資訊
		menu000Name.setText(bs.getMenu000Name());
		menu001Name.setText(bs.getMenu001Name());
		menu002Name.setText(bs.getMenu002Name());
		menu000Price.setText(bs.getMenu000Price().toString());
		menu001Price.setText(bs.getMenu001Price().toString());
		menu002Price.setText(bs.getMenu002Price().toString());

		Color cBack = new Color(bs.getBackR(), bs.getBackG(), bs.getBackB());
		Color cFore = new Color(bs.getForeR(), bs.getForeG(), bs.getForeB());

		contentPane.setBackground(cBack);
		menu000Name.setForeground(cFore);
		menu001Name.setForeground(cFore);
		menu002Name.setForeground(cFore);
		menu000Price.setForeground(cFore);
		menu001Price.setForeground(cFore);
		menu002Price.setForeground(cFore);
		lb000.setForeground(cFore);
		lb001.setForeground(cFore);
		lb002.setForeground(cFore);
		lbCount000.setForeground(cFore);
		lbCount001.setForeground(cFore);
		lbCount002.setForeground(cFore);

		Cal.saveFile("branchShop.txt", bs);

	}

    //顯示時間
	protected class JLabelTimerTask extends TimerTask {
		SimpleDateFormat sdf = new SimpleDateFormat(DTF);

		@Override
		public void run() {
			String strDateTime = sdf.format(Calendar.getInstance().getTime());
			lbDateTime.setText(strDateTime);
		}
	}
	
	//檢查欄位與分店名稱是否空白
	public boolean checkField() 
	{
		if (cbShopNameList.getItemCount() <= 0)
		{
			JOptionPane.showMessageDialog(null, "沒有分店可以選擇", "下訂單", JOptionPane.WARNING_MESSAGE);
			return false;
		}
		String strMenu000Count = menu000Count.getText();
		String strMenu001Count = menu001Count.getText();
		String strMenu002Count = menu002Count.getText();
		if (strMenu000Count.isEmpty() ||
			strMenu001Count.isEmpty() ||
			strMenu002Count.isEmpty())
		{
			JOptionPane.showMessageDialog(null, "欄位不可為空白", "下訂單", JOptionPane.WARNING_MESSAGE);
			return false;
		}
		return true;
	}
	
	//計算總額並存在 "totalMoney.txt"
	public void printInfo() 
	{
		String strMenu000Name = menu000Name.getText();
		String strMenu001Name = menu001Name.getText();
		String strMenu002Name = menu002Name.getText();
		
		String strMenu000Price = menu000Price.getText();
		String strMenu001Price = menu001Price.getText();
		String strMenu002Price = menu002Price.getText();		
		Integer iMenu000Price = Integer.parseInt(strMenu000Price);
		Integer iMenu001Price = Integer.parseInt(strMenu001Price);
		Integer iMenu002Price = Integer.parseInt(strMenu002Price);
		
		String strMenu000Count = menu000Count.getText();
		String strMenu001Count = menu001Count.getText();
		String strMenu002Count = menu002Count.getText();
		Integer iMenu000Count = Integer.parseInt(strMenu000Count);
		Integer iMenu001Count = Integer.parseInt(strMenu001Count);
		Integer iMenu002Count = Integer.parseInt(strMenu002Count);

		Integer iSum = iMenu000Price*iMenu000Count +
				       iMenu001Price*iMenu001Count +
				       iMenu002Price*iMenu002Count;
		String strResult = lbDateTime.getText() 
				         + "\n" + cbShopNameList.getSelectedItem().toString()
				         + "\n" + strMenu000Name + "\t" + iMenu000Price + "元\t" + iMenu000Count + "個\t=\t" + iMenu000Price*iMenu000Count + "元"
				         + "\n" + strMenu001Name + "\t" + iMenu001Price + "元\t" + iMenu001Count + "個\t=\t" + iMenu001Price*iMenu001Count + "元"
				         + "\n" + strMenu002Name + "\t" + iMenu002Price + "元\t" + iMenu002Count + "個\t=\t" + iMenu001Price*iMenu001Count + "元"
				         + "\n-----------------------------"
				         + "\n共" + iSum + "元";
		textArea.setText(strResult);
		Cal.saveFile("totalMoney.txt", strResult);
	}
}
