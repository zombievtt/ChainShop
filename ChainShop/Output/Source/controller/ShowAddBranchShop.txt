private String DTF = "yyyy-MM-dd HH:mm:ss";
private String strDateTime = "";
private final int ONE_SECOND = 1000;

public ShowAddBranchShop() {
	
	setTitle("新增分店");
	
	JSlider sliderForeR = new JSlider();
	sliderForeR.setMaximum(255);
	
	JSlider sliderForeG = new JSlider();
	sliderForeG.setMaximum(255);
	
	JSlider sliderForeB = new JSlider();
	sliderForeB.setMaximum(255);
	
	//JSlider 事件
	ChangeListener clBack = new ChangeListener() {

		@Override
		public void stateChanged(ChangeEvent e) {
			//即時改變背景色
			Integer r = sliderBackR.getValue();
			Integer g = sliderBackG.getValue();
			Integer b = sliderBackB.getValue();
			
			lbBackR.setText(r.toString());
			lbBackG.setText(g.toString());
			lbBackB.setText(b.toString());
			
			Color c = new Color(r, g, b);
			panelBackgroundColor.setBackground(c);

			
			
		}
	};
				
	sliderBackR.addChangeListener(clBack);
	sliderBackG.addChangeListener(clBack);
	sliderBackB.addChangeListener(clBack);
	
	//JSlider 事件
	ChangeListener clFore = new ChangeListener() {

		@Override
		public void stateChanged(ChangeEvent e) {
			//即時改變文字顏色
			Integer r = sliderForeR.getValue();
			Integer g = sliderForeG.getValue();
			Integer b = sliderForeB.getValue();
			
			lbForeR.setText(r.toString());
			lbForeG.setText(g.toString());
			lbForeB.setText(b.toString());	
			
			Color c = new Color(r, g, b);
			lbForegroundColor.setForeground(c);
		}
	};
	
	sliderForeR.addChangeListener(clFore);
	sliderForeG.addChangeListener(clFore);
	sliderForeB.addChangeListener(clFore);
	
	
	//只能輸入數字
	KeyAdapter ka = new KeyAdapter(){
		public void keyTyped(KeyEvent e) {
			int keyChar = e.getKeyChar();
			if (keyChar >= KeyEvent.VK_0 && keyChar <= KeyEvent.VK_9) {
			}
			else
			{
				//禁用鍵盤事件傳遞
				e.consume();
			}
		}
	};
	menu000Price.addKeyListener(ka);
	menu001Price.addKeyListener(ka);
	menu002Price.addKeyListener(ka);
		
	//每隔一秒取得時間
	Timer timer = new Timer();
	timer.scheduleAtFixedRate(new JLabelTimerTask(), new Date(), ONE_SECOND);
	
	JButton btnOK = new JButton("確定");
	btnOK.addMouseListener(new MouseAdapter() {
		@Override
		public void mouseClicked(MouseEvent e) {
			
			//取得欲新增分店的名稱
			String strShopName = textShopName.getText().trim();
			if (strShopName.equals(""))
			{
				JOptionPane.showMessageDialog(null,"分店需有名稱","開新分店",JOptionPane.WARNING_MESSAGE);
				textShopName.setText("");
				return;
			}

			//取得該分店名稱資訊
			List<BranchShop> l = new BranchShopServiceImpl().queryAllByShopName(strShopName);
			if (0 == l.size())
			{
				//由UI取得欲新增的分店資訊
				String strBackR = lbBackR.getText();
				String strBackG = lbBackG.getText();
				String strBackB = lbBackB.getText();
				String strForeR = lbForeR.getText();
				String strForeG = lbForeG.getText();
				String strForeB = lbForeB.getText();
				String strMenu000Name = menu000Name.getText().trim();
				String strMenu001Name = menu001Name.getText().trim();
				String strMenu002Name = menu002Name.getText().trim();
				String strMenu000Price = menu000Price.getText().trim();
				String strMenu001Price = menu001Price.getText().trim();
				String strMenu002Price = menu002Price.getText().trim();
				if (strMenu000Name.equals("") ||
					strMenu001Name.equals("") ||
					strMenu002Name.equals("") ||
					strMenu000Price.equals("") ||
					strMenu001Price.equals("") ||
					strMenu002Price.equals("") 
					)
				{
					JOptionPane.showMessageDialog(null,"欄位不可以空白","開新分店",JOptionPane.WARNING_MESSAGE);
					return;
				}
				BranchShop bs = new BranchShop();
				bs.setBackR(Integer.parseInt(strBackR));
				bs.setBackG(Integer.parseInt(strBackG));
				bs.setBackB(Integer.parseInt(strBackB));
				bs.setForeR(Integer.parseInt(strForeR));
				bs.setForeG(Integer.parseInt(strForeG));
				bs.setForeB(Integer.parseInt(strForeB));
				bs.setMenu000Name(strMenu000Name);
				bs.setMenu001Name(strMenu001Name);
				bs.setMenu002Name(strMenu002Name);
				bs.setMenu000Price(Integer.parseInt(strMenu000Price));
				bs.setMenu001Price(Integer.parseInt(strMenu001Price));
				bs.setMenu002Price(Integer.parseInt(strMenu002Price));
				bs.setShopName(strShopName);

				//新增該分店
				new BranchShopServiceImpl().addBranchShop(bs);
				JOptionPane.showMessageDialog(null,"新增分店成功","開新分店",JOptionPane.WARNING_MESSAGE);
				BranchShopManager bsm = new BranchShopManager();
				bsm.setVisible(true);
				dispose();
			}
			else
			{
				JOptionPane.showMessageDialog(null,"此分店名稱已存在, 無法新增分店.","開新分店",JOptionPane.WARNING_MESSAGE);	//确认对话框
			}
			
		}
	});

}

//顯示時間
protected class JLabelTimerTask extends TimerTask
{
	SimpleDateFormat sdf = new SimpleDateFormat(DTF);

	@Override
	public void run() {
		String strDateTime = sdf.format(Calendar.getInstance().getTime());
		lbDateTime.setText(strDateTime);
	}
}
